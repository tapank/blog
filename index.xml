<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes to self</title>
    <link>https://karecha.com/</link>
    <description>Recent content on Notes to self</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>tapan@karecha.com (Tapan Karecha)</managingEditor>
    <webMaster>tapan@karecha.com (Tapan Karecha)</webMaster>
    <lastBuildDate>Wed, 29 Jun 2022 11:10:23 +0530</lastBuildDate><atom:link href="https://karecha.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Three Good Links: 29 June 2022</title>
      <link>https://karecha.com/blog/2022/06/29/three-good-links-29-june-2022/</link>
      <pubDate>Wed, 29 Jun 2022 11:10:23 +0530</pubDate>
      <author>tapan@karecha.com (Tapan Karecha)</author>
      <guid>https://karecha.com/blog/2022/06/29/three-good-links-29-june-2022/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://larahogan.me/blog/first-one-on-one-questions/&#34;&gt;Questions for our first 1:1&lt;/a&gt;: Lara Hogan&amp;rsquo;s advice to Engineering Managers starting a new reporting relationship &amp;ndash; gather this particular data during an initial 1:1.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/walmartglobaltech/graphql-vs-rest-f067a79c2230&#34;&gt;GraphQL vs REST&lt;/a&gt;: Because of its benefits, Walmart Affiliate Team has adopted GraphQL for many applications, instead of using REST. This post compares the two approaches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.blog/2022-05-16-how-were-using-projects-to-build-projects/&#34;&gt;How we&amp;rsquo;re using projects to build projects&lt;/a&gt;: If your team uses GitHub for hosting code but does not use it for project planning and execution, you may want to reconsider. Check out how GitHub uses projects to build a powerful project planning for developers in a &amp;ldquo;Eat your own dog food&amp;rdquo; kind of way.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Three Good Links: 22 June 2022</title>
      <link>https://karecha.com/blog/2022/06/22/three-good-links-22-june-2022/</link>
      <pubDate>Wed, 22 Jun 2022 08:48:44 +0530</pubDate>
      <author>tapan@karecha.com (Tapan Karecha)</author>
      <guid>https://karecha.com/blog/2022/06/22/three-good-links-22-june-2022/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://lingnik.com/2022/06/07/i-am-an-engineer-again-or-there-and-back-again.html&#34;&gt;I&amp;rsquo;m an Engineer Again&lt;/a&gt;: A story of an engineer who became a manager and then seven years later, decided to stop being a manager. Now he is an engineer again.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://engineering.grab.com/real-time-data-ingestion&#34;&gt;Real-time data ingestion at Grab&lt;/a&gt;: Grab&amp;rsquo;s scalable event-driven solution, facilitated by a bunch of internal products, and designed for real-time ingestion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.tbray.org/ongoing/When/202x/2022/06/10/Quamina-Optimizing&#34;&gt;Making Code Faster&lt;/a&gt;: When you have a body of code with a decent unit-test suite and you need to make it go faster.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Three Good Links: 15 June 2022</title>
      <link>https://karecha.com/blog/2022/06/15/three-good-links-15-june-2022/</link>
      <pubDate>Wed, 15 Jun 2022 08:15:15 +0530</pubDate>
      <author>tapan@karecha.com (Tapan Karecha)</author>
      <guid>https://karecha.com/blog/2022/06/15/three-good-links-15-june-2022/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://8thlight.com/blog/abstractions-are-opinionated/&#34;&gt;How Effective Abstractions Are Opinionated&lt;/a&gt;: Every software system is built on top of a towering stack of abstractions. Yet we know abstractions are imperfect representations of reality. How does it all work together? How can we make any progress if we can’t fundamentally trust our tools?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://vitalik.ca/general/2022/06/12/nonfin.html&#34;&gt;Where to use a blockchain in non-financial applications?&lt;/a&gt;: Recently, there has been a growing amount of interest in using blockchains for not-just-financial applications. What could be done with a richer ecosystem of soulbound tokens making claims describing various kinds of relationships?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.programmingbooks.dev/&#34;&gt;Programming Books&lt;/a&gt;: An Ordered and Curated Reading List for Software Craftsmanship Growth.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Engineering Managers -- Improve Success In Your New Job</title>
      <link>https://karecha.com/blog/2022/06/14/engineering-managers--improve-success-in-your-new-job/</link>
      <pubDate>Tue, 14 Jun 2022 12:26:10 +0530</pubDate>
      <author>tapan@karecha.com (Tapan Karecha)</author>
      <guid>https://karecha.com/blog/2022/06/14/engineering-managers--improve-success-in-your-new-job/</guid>
      <description>&lt;p&gt;What can you do to improve your success in a new job as Engineering Manager (EM)? To answer this question, we will start with your offer acceptance. We will assume you are already an EM and this role is not new to you. Stepping into an EM role for the first time requires a different kind of preparation which is a separate discussion. This post is for EMs who are switching companies, have interviewed, got offer(s), and have accepted the most suitable offer.&lt;/p&gt;
&lt;p&gt;Once offer acceptance marks an end to your job hunt, shift your focus to onboarding, and beyond. Here&amp;rsquo;s a two-part plan. Part one is what you can do until the day of joining and part two is what you can do in the first 4 weeks after joining. This is not an exhaustive list of possible actions but should broadly apply to many EM roles.&lt;/p&gt;
&lt;h2 id=&#34;part-one&#34;&gt;Part one&lt;/h2&gt;
&lt;p&gt;As the joining date approaches, use your time to get familiar with your new employer&amp;rsquo;s business domain and tech stack. Brush up on your management fundamentals too. Let&amp;rsquo;s take a look at each one of these:&lt;/p&gt;
&lt;h3 id=&#34;1-business-domain&#34;&gt;1. Business domain&lt;/h3&gt;
&lt;p&gt;The new business domain may be unfamiliar territory for you unless you are switching jobs within the same domain. In any case, you can either learn or reinforce your domain knowledge. This is the time when you will be able to glance at the broad terrain of this domain without getting lost in the details, which is unavoidable after you start on the job. Read an introductory book about this domain or read an advanced topics book if you are already familiar with the domain. The idea is to up your game on your domain knowledge. Find other resources on the web that can give you more information about the domain. Learn about recent advancements in this domain. Scan news about your domain and set up Google Alerts to keep up with new developments.&lt;/p&gt;
&lt;h4 id=&#34;2-techstack&#34;&gt;2. Techstack&lt;/h4&gt;
&lt;p&gt;Ask the hiring manager about the tech stack you will be using. Also, find out what is on the technology roadmap for the next two or more quarters. List the key technologies or frameworks they use, including the infrastructure they use, and learn or brush up on these topics and learn the jargon. Once you start a new job, initially you may not find time to learn new things.&lt;/p&gt;
&lt;h3 id=&#34;3-engineering-management-fundamentals&#34;&gt;3. Engineering management fundamentals&lt;/h3&gt;
&lt;p&gt;Brush up on your engineering management fundamentals. This is an opportunity to reflect upon what you did well and what you could have done better. You could also brush up on your project management methodology skills. Starting on a clean slate allows you to do things differently. Hence, based on your past experience, think about what would you do differently this time.&lt;/p&gt;
&lt;h2 id=&#34;part-two&#34;&gt;Part two&lt;/h2&gt;
&lt;p&gt;This phase begins on the day you start your new job. In the first four weeks, focus on observing, networking, mapping the territory, and goal setting.&lt;/p&gt;
&lt;h3 id=&#34;1-connect-and-network&#34;&gt;1. Connect and network&lt;/h3&gt;
&lt;p&gt;Your hiring manager will introduce you to the team, but if they do not (yes, people forget!), go ahead and do that yourself as soon as you can. Set up one-on-ones with your team members. Understand their view of the product and people. You also want to start meeting up with your peers, your superiors, product owners, and other stakeholders. During the 1x1s, focus on learning about their role and identify synergies. Understand their expectations from your role and identify co-dependencies. It can be tempting to spend too much time in the 1x1 talking about yourself; resist the urge. You do not have to prove anything to anybody yet, let your work eventually speak for itself, but it will take time. So, during 1x1s, ask questions, listen, try to understand, take notes, and ask about their biggest challenges and how can you help.&lt;/p&gt;
&lt;h3 id=&#34;2-get-your-hands-dirty&#34;&gt;2. Get your hands dirty&lt;/h3&gt;
&lt;p&gt;Set up your dev environment. Put on the hat of an engineer in the team and list down all the pain points a new joiner will encounter during onboarding. As you go through this process, update onboarding documentation with new information which you find missing. If there is no onboarding documentation, create one! Start participating in team rituals. Go through the Jira issues (or whatever equivalent your team uses for an issue tracker). Ask questions on tickets, on team chat, during the standups, and other team meetings. Resist the urge to change things too soon &amp;ndash; you may not understand enough about the product or the team to start making informed decisions yet. As they say, if a wall exists it is there for a reason. Do not tear down the walls too soon; you will be surprised by what else crumbles.&lt;/p&gt;
&lt;h3 id=&#34;3-get-a-foothold&#34;&gt;3. Get a foothold&lt;/h3&gt;
&lt;p&gt;By the end of the fourth week, strive to be in a position where you can answer questions from your stakeholders without having to consult your team. Don&amp;rsquo;t get me wrong, it is difficult to answer every question in this short duration, but aiming to do so will propel you in the right direction.&lt;/p&gt;
&lt;h3 id=&#34;4-set-goals&#34;&gt;4. Set goals&lt;/h3&gt;
&lt;p&gt;Finally, within the first four weeks, you should have a good understanding of your role&amp;rsquo;s expectations. You should be able to explain what it takes to succeed in this role. This is best done by documenting your goals which you and your manager have agreed upon. Working hard without knowing your goals will sap your energy, enthusiasm, and morale.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;By the end of the fourth week at this new job, you should start feeling at home. You are onboarded, and the next phase begins. From here on, you will contribute to business and deliver a measurable impact. These were the first steps to success in your new job. You are going to be amazing!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Three Good Links: 08 June 2022</title>
      <link>https://karecha.com/blog/2022/06/08/three-good-links-08-june-2022/</link>
      <pubDate>Wed, 08 Jun 2022 09:24:12 +0530</pubDate>
      <author>tapan@karecha.com (Tapan Karecha)</author>
      <guid>https://karecha.com/blog/2022/06/08/three-good-links-08-june-2022/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jamesshore.com/v2/blog/2019/dont-measure-unit-test-code-coverage&#34;&gt;Don&amp;rsquo;t Measure Unit Test Code Coverage&lt;/a&gt;: Are you trying to improve the code quality? Learn testing skills, speed up the test loop, refactor more, use evolutionary design, and try pairing or mobbing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cacm.acm.org/magazines/2022/5/260357-the-go-programming-language-and-environment/fulltext&#34;&gt;The Go Programming Language and Environment&lt;/a&gt;: Creators of Go examine the design decisions they believe are most responsible for Go&amp;rsquo;s success, exploring how they apply not just to the language but also to the environment more broadly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://architecturenotes.co/fallacies-of-distributed-systems/&#34;&gt;Fallacies of Distributed Systems&lt;/a&gt;: A set of assertions made by L Peter Deutsch and others at Sun Microsystems describing false assumptions that programmers new to distributed applications invariably make.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Three Good Links: 01 June 2022</title>
      <link>https://karecha.com/blog/2022/06/01/three-good-links-01-june-2022/</link>
      <pubDate>Wed, 01 Jun 2022 07:23:56 +0530</pubDate>
      <author>tapan@karecha.com (Tapan Karecha)</author>
      <guid>https://karecha.com/blog/2022/06/01/three-good-links-01-june-2022/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.infoworld.com/article/3635708/technical-debt-will-sink-you.html&#34;&gt;Technical debt will sink you&lt;/a&gt;: Short-term fixes and partially implemented systems have costs that can weigh on a company for years. This debt can also stifle innovation, resulting in lower long-term revenue.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.reddit.com/r/RedditEng/comments/uu3mwj/android_dynamic_feature_modules/&#34;&gt;Android Dynamic Feature Modules&lt;/a&gt;: Reddit Tech Blog talks about how they used Android&amp;rsquo;s Dynamic Feature Modules to reduce the Reddit app size after integrating a new feature from an acquisition.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://tom.preston-werner.com/2022/05/23/major-version-numbers-are-not-sacred.html&#34;&gt;Major Version Numbers are Not Sacred&lt;/a&gt;: The author of Semantic Versioning (SemVer) spec is unhappy about our collective hesitance to bump the major version of packages. He attempts to convince us that major version numbers are not sacred.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Perks of Remote Work</title>
      <link>https://karecha.com/blog/2022/05/30/perks-of-remote-work/</link>
      <pubDate>Mon, 30 May 2022 09:05:19 +0530</pubDate>
      <author>tapan@karecha.com (Tapan Karecha)</author>
      <guid>https://karecha.com/blog/2022/05/30/perks-of-remote-work/</guid>
      <description>&lt;p&gt;Remote work is showing signs of going mainstream. This presents an opportunity for knowledge workers to embrace this option and lead a healthy life. However, there are misconceptions about remote work that can lead to the opposite and you may end up living an unhealthy life. Some misconceptions are: flexible work hours, the ability to work in pajamas, the ability to work from vacation spots, etc. While enticing, this framing is misguided because such a lifestyle is unsustainable. This may be why after the pandemic, some people are longing to go back to the office. They miss the structure and routine an office can provide for their workday.&lt;/p&gt;
&lt;p&gt;Remote work works best if you are self-disciplined. Once the guard rails from an office environment are unavailable, you need to build your own. You need to fix your work hours. You need to dress for work even when you are remote because this helps your brain put you in work mode. Not doing this blurs the work/life boundary, leading to burnout. Replace your commute time with low-intensity workouts, such as a 30-minute stroll in the neighborhood before and after work. This creates a reasonable boundary between your work hours and off-hours. That last thing is the best part of remote work. No more &amp;ldquo;I don&amp;rsquo;t have time for exercise&amp;rdquo; excuse!&lt;/p&gt;
&lt;p&gt;Remote work is here to stay as an option for knowledge workers. When done right, it can be life-changing. Seize this opportunity if you can.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Three Good Links: 25 May 2022</title>
      <link>https://karecha.com/blog/2022/05/25/three-good-links-25-may-2022/</link>
      <pubDate>Wed, 25 May 2022 12:07:26 +0530</pubDate>
      <author>tapan@karecha.com (Tapan Karecha)</author>
      <guid>https://karecha.com/blog/2022/05/25/three-good-links-25-may-2022/</guid>
      <description>&lt;p&gt;Sage advice from Steve McConnell on improving software engineering outcomes; a video introduction to machine learning; and how to build Go backends.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://stevemcconnell.com/articles/cargo-cult-software-engineering/&#34;&gt;Cargo Cult Software Engineering&lt;/a&gt;: In this classic article, Steve McConnell argues that rather than debating process vs. commitment, we should be looking for ways to raise the average level of developer and manager competence to improve outcomes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=qpCQUJQvOrs&#34;&gt;A Quick Guide to Machine Learning&lt;/a&gt;: Seth Juarez of Microsoft talks about machine learning in a way that a programmer gets. He also makes us laugh along the way! He says: Artificial Intelligence is what it is called when you are selling it, and Machine Learning is what it is called when you are doing it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://8thlight.com/blog/emmanuel-byrd/2022/05/19/well-thought-project-layout-design-for-a-golang-backend.html&#34;&gt;How To Bootstrap A Quality Golang Backend&lt;/a&gt;: Having the knowledge to build a Golang project from scratch will not only give you more freedom to build your own apps, but will also provide you with a better understanding of why your existing codebases are built that way.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Three Good Links: 18 May 2022</title>
      <link>https://karecha.com/blog/2022/05/18/three-good-links-18-may-2022/</link>
      <pubDate>Wed, 18 May 2022 07:00:24 +0530</pubDate>
      <author>tapan@karecha.com (Tapan Karecha)</author>
      <guid>https://karecha.com/blog/2022/05/18/three-good-links-18-may-2022/</guid>
      <description>&lt;p&gt;A Software Engineering book; JavaScript screencasts; and a Git book.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://abseil.io/resources/swe-book&#34;&gt;Software Engineering at Google&lt;/a&gt;: The &amp;ldquo;SWE Book&amp;rdquo; is not about programming, per se, but about the engineering practices utilized at Google to make their codebase sustainable and healthy. Abseil has made it available for free but it can also be purchased online from the usual stores.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.letscodejavascript.com/&#34;&gt;The JavaScript Screencast for Professionals&lt;/a&gt;: Let&amp;rsquo;s Code JavaScript is a screencast about automation, test-driven development, refactoring, and much more! Launched ten years ago, it now has over 150 hours of content across more than 600 videos, and has been available to subscribers. Now James Shore, the author, has made it free for all.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://jwiegley.github.io/git-from-the-bottom-up/&#34;&gt;Git from the Bottom Up&lt;/a&gt;: Even for daily users of Git, many of its capabilities are too complex to understand. This online book will help to advance your understanding of this powerful content tracking system, and reveal a bit of the simplicity underlying it &amp;ndash; however dizzying its array of options may seem from the outside.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Three Good Links: 11 May 2022</title>
      <link>https://karecha.com/blog/2022/05/11/three-good-links-11-may-2022/</link>
      <pubDate>Wed, 11 May 2022 10:35:52 +0530</pubDate>
      <author>tapan@karecha.com (Tapan Karecha)</author>
      <guid>https://karecha.com/blog/2022/05/11/three-good-links-11-may-2022/</guid>
      <description>&lt;p&gt;An online book for software development managers; founders discuss the suitability of the Go programming language to build startups; and how to read an RFC.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://themanagershandbook.com/&#34;&gt;The Manager&amp;rsquo;s Handbook&lt;/a&gt;: This online book by Alex MacCaw of Clearbit represents the company&amp;rsquo;s collective knowledge of management. It was written as part of the internal management training program and is now published for anyone who may find it useful.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://changelog.com/gotime/177&#34;&gt;Building startups with Go&lt;/a&gt;: Is the Go programming language a good choice for startups? In this episode of Go Time podcast, the host talks to four startup founders to learn about their experience building a startup with Go.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ietf.org/blog/how-read-rfc/&#34;&gt;How to Read an RFC&lt;/a&gt;: Requests for Comments (RFCs) are how protocols are specified on the Internet. This post provides some insight into how they&amp;rsquo;re constructed and published, and makes it a bit easier to understand what you&amp;rsquo;re looking at.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Three Good Links: 04 May 2022</title>
      <link>https://karecha.com/blog/2022/05/04/three-good-links-04-may-2022/</link>
      <pubDate>Wed, 04 May 2022 12:00:00 +0530</pubDate>
      <author>tapan@karecha.com (Tapan Karecha)</author>
      <guid>https://karecha.com/blog/2022/05/04/three-good-links-04-may-2022/</guid>
      <description>&lt;p&gt;Advice for programmers contemplating a startup, practicing with code katas, and the latest edition of Thoughtworks Technology Radar.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.al3x.net/blog/2013/05/23/letter-to-a-young-programmer-considering-a-startup&#34;&gt;Letter To A Young Programmer Considering A Startup&lt;/a&gt;: The author regularly gets emails from young people, usually those with an interest in programming, who are trying to make decisions about school and/or their professional futures. This post is for those young people.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://8thlight.com/blog/micah-martin/2013/05/28/performing-code-katas.html&#34;&gt;Performing Code Katas&lt;/a&gt;: Software developers use katas to build muscle memory, practice logical thought and teach themselves familiar ideas but from a different perspective. Katas can stretch our abilities, teach us to become comfortable with the uncomfortable, and help us write code we may not normally write.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.thoughtworks.com/content/dam/thoughtworks/documents/radar/2022/03/tr_technology_radar_vol_26_en.pdf&#34;&gt;Technology Radar, Vol 26 (pdf)&lt;/a&gt;: Technology Radar is created by The Thoughtworks Technology Advisory Board, a group of senior technology leaders at Thoughtworks. It rates techniques, tools, platforms, and languages &amp;amp; frameworks; and captures it in a format that provides value to a wide range of stakeholders, from developers to CTOs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Three Good Links: 27 April 2022</title>
      <link>https://karecha.com/blog/2022/04/27/three-good-links-27-april-2022/</link>
      <pubDate>Wed, 27 Apr 2022 11:10:40 +0530</pubDate>
      <author>tapan@karecha.com (Tapan Karecha)</author>
      <guid>https://karecha.com/blog/2022/04/27/three-good-links-27-april-2022/</guid>
      <description>&lt;p&gt;A free online book for software engineers, an introduction to generics in Go by the core team members, and a guide to OAuth.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://selfimproving.dev/contents.html&#34;&gt;The Self-Improving Developer&lt;/a&gt;: After reading this book, you’ll have a good overview of the things that a good Software Engineer encounters in about the first 10 years of experience. The focus is on breadth over depth.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://go.dev/blog/intro-generics&#34;&gt;An Introduction To Generics in Go&lt;/a&gt;: The Go 1.18 release adds support for generics. Generics are the biggest change to Go since the first open-source release. Robert Griesemer and Ian Lance Taylor introduce the topic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://fusionauth.io/learn/expert-advice/oauth/modern-guide-to-oauth&#34;&gt;The Modern Guide to OAuth&lt;/a&gt;: This guide covers all of the ways that we actually use OAuth. It also covers all of the details you need to be an OAuth expert without reading all the specifications or writing your own OAuth server.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Three Good Links: 20 April 2022</title>
      <link>https://karecha.com/blog/2022/04/20/three-good-links-20-april-2022/</link>
      <pubDate>Wed, 20 Apr 2022 12:06:02 +0530</pubDate>
      <author>tapan@karecha.com (Tapan Karecha)</author>
      <guid>https://karecha.com/blog/2022/04/20/three-good-links-20-april-2022/</guid>
      <description>&lt;p&gt;Crypto, Linux commands, and FoundationDB.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://a16z.com/2018/02/10/crypto-readings-resources/&#34;&gt;Crypto Canon&lt;/a&gt;: A list of crypto readings and resources organized from building blocks and basics, foundations &amp;amp; history, and key concepts &amp;ndash; followed by specific topics such as governance, privacy and security, scaling, decentralized exchanges, non-fungible tokens, and more.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ZtqBQ68cfJc&#34;&gt;The 50 Most Popular Linux Commands&lt;/a&gt;: In this youtube video (duration: 5 hours), learn the 50 most popular Linux commands from Colt Steele. All these commands work on Linux, macOS, WSL, and anywhere you have a UNIX environment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.foundationdb.org/files/fdb-paper.pdf&#34;&gt;FoundationDB&lt;/a&gt;: ACM paper [pdf] on FoundationDB, an open-source transactional key-value store, which adopts an unbundled architecture that decouples an in-memory transaction management system, a distributed storage system, and a built-in distributed configuration system.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Amazon 2021 Letter to the Shareholders</title>
      <link>https://karecha.com/blog/2022/04/15/amazon-2021-letter-to-the-shareholders/</link>
      <pubDate>Fri, 15 Apr 2022 10:40:37 +0530</pubDate>
      <author>tapan@karecha.com (Tapan Karecha)</author>
      <guid>https://karecha.com/blog/2022/04/15/amazon-2021-letter-to-the-shareholders/</guid>
      <description>&lt;p&gt;Amazon&amp;rsquo;s new CEO Andy Jassy&amp;rsquo;s &lt;a href=&#34;https://www.aboutamazon.com/news/company-news/2021-letter-to-shareholders&#34;&gt;2021 letter to the shareholders&lt;/a&gt; just came out and is packed with information about Amazon&amp;rsquo;s successes as well as the challenges they faced last year. What I found interesting is buried deep &amp;ndash; components that are helping Amazon succeed. Here is the condensed list (read the letter for details):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hire the Right Builders (&amp;ldquo;people who like to invent, who look at customer experiences, dissect what doesn&amp;rsquo;t work well about them, and seek to reinvent them&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;Organize Builders into Teams That Are as Separable and Autonomous as Possible (&amp;ldquo;single-threaded teams will know their customers&amp;rsquo; needs better&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;Give Teams the Right Tools and Permission to Move Fast&lt;/li&gt;
&lt;li&gt;You Need Blind Faith, But No False Hope (&amp;ldquo;feedback loops&amp;rdquo; and &amp;ldquo;product development process of working backwards from the customer&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;Define a Minimum Loveable Product (MLP), and Be Willing to Iterate Fast (&amp;ldquo;figuring out where to draw the line for launch&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;Adopt a Long-term Orientation (&amp;ldquo;you have to be in it for the long-haul or you&amp;rsquo;ll give up too quickly&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;Brace Yourself for Failure (&amp;ldquo;if you invent a lot, you will fail more often than you wish&amp;rdquo;)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Follow Your Interests</title>
      <link>https://karecha.com/blog/2022/04/11/follow-your-interests/</link>
      <pubDate>Mon, 11 Apr 2022 08:55:45 +0530</pubDate>
      <author>tapan@karecha.com (Tapan Karecha)</author>
      <guid>https://karecha.com/blog/2022/04/11/follow-your-interests/</guid>
      <description>&lt;p&gt;Are you following your own unique interests?&lt;/p&gt;
&lt;p&gt;A career in software development is more varied and diverse than you would think. If a particular job title or working at a particular company drives you, it is possible that it is triggering your ego. Say, you love your job and you like your current role. But a colleague or a buddy from college is doing much better. They either have a better job title or a better salary, or they just landed a job at a nice company (Google, Amazon, Facebook, or such), or for heaven&amp;rsquo;s sake, they just relocated to a nice place in Europe or the USA. Best of all, they perhaps did all of the above in one shot! This can be unsettling, right? Well&amp;hellip;&lt;/p&gt;
&lt;p&gt;If you are thinking only of the perks and not about your craft, you are thinking short-term. Ask anybody who has been in the industry long enough to have lived through booms and busts, and they will tell you that job satisfaction and contentment come from loving your craft.&lt;/p&gt;
&lt;p&gt;Love what you do. Do what you love.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Stripe Business Update</title>
      <link>https://karecha.com/blog/2022/04/09/stripe-business-update/</link>
      <pubDate>Sat, 09 Apr 2022 11:19:37 +0530</pubDate>
      <author>tapan@karecha.com (Tapan Karecha)</author>
      <guid>https://karecha.com/blog/2022/04/09/stripe-business-update/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://stripe.com&#34;&gt;Stripe&lt;/a&gt;&amp;rsquo;s cofounders published an annual letter to their users. Things that caught my eye in this 2021 business update are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Rise of the creator economy
&amp;ldquo;Creator economy, a term that refers to directing payments to those creating content or products on internet platforms: think developers on GitHub, podcasters on Spotify, or the Twitterati on Twitter all getting paid directly for their creations.&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rise of embedded finance
&amp;ldquo;&amp;hellip; the explosive growth in fintech &amp;hellip; platforms are now integrating additional financial services directly into their products, such as business expense cards, monetary accounts, and loan access.&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enterprises will need to adapt
&amp;ldquo;Established businesses have realized that they need to match the customer experience that the world’s most exciting startups invent, and that to be stuck on legacy technology is a business liability.&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Evolution of platform architecture
&amp;ldquo;We&amp;rsquo;re also rebuilding the architecture (in a more service-oriented fashion) on which the core Stripe API calls run; our pilot customers running on that new architecture are seeing 99th percentile latency improvements of over 50%. We’ll continue over the course of this year to make Stripe more reliable and performant for you.&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Technologically, this last one is the highlight of the letter for me. We sometimes underestimate the need for ongoing investment in evolving the architecture to meet the current and future needs of the platform. Improving the performance of an application can create a better customer experience and stickiness than adding a new feature. It is harder to make a case for non-functional improvements because benefits lend poorly to the measurement of business impact. As an engineering leader, take it upon yourself to give attention to non-functional improvements.&lt;/p&gt;
&lt;p&gt;Read &lt;a href=&#34;https://stripe.com/files/stripe-2021-update.pdf&#34;&gt;the letter here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Long Career in Software Development</title>
      <link>https://karecha.com/blog/2022/04/06/long-career-in-software-development/</link>
      <pubDate>Wed, 06 Apr 2022 10:50:18 +0530</pubDate>
      <author>tapan@karecha.com (Tapan Karecha)</author>
      <guid>https://karecha.com/blog/2022/04/06/long-career-in-software-development/</guid>
      <description>&lt;p&gt;This is an excellent article by someone who (well, his name is Alex) has been in the industry for 20+ years and during this time, has played various roles in software development. My biggest takeaways from the article are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A successful and fulfilling career need not follow a linear path.&lt;/li&gt;
&lt;li&gt;This one is for people who have switched to the management path: never stop coding, no matter your title.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here&amp;rsquo;s &lt;a href=&#34;https://alexewerlof.medium.com/my-guiding-principles-after-20-years-of-programming-a087dc55596c&#34;&gt;the link to the article&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Harvard&#39;s CS50P 2022</title>
      <link>https://karecha.com/blog/2022/04/03/harvards-cs50p-2022/</link>
      <pubDate>Sun, 03 Apr 2022 10:05:02 +0530</pubDate>
      <author>tapan@karecha.com (Tapan Karecha)</author>
      <guid>https://karecha.com/blog/2022/04/03/harvards-cs50p-2022/</guid>
      <description>&lt;p&gt;Harvard&amp;rsquo;s popular CS50 and related courses (CS50X, CS50G, etc.) are a gift to the world (they are all free!) which we do not appreciate enough. One of these courses starts soon and is called CS50P &amp;ndash; CS50&amp;rsquo;s Introduction to Programming with Python. The course is relevant if you belong to one of the following categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A nonprogrammer who wants to learn to program (not necessarily as a career choice but just to improve your effectiveness in your current job, or as a hobby)&lt;/li&gt;
&lt;li&gt;A programmer who wants to learn Python (it is the most popular language in the industry today!)&lt;/li&gt;
&lt;li&gt;A Python programmer who just wants to brush up on the fundamentals&lt;/li&gt;
&lt;li&gt;A parent of a middle or high schooler (this will be an opportunity for your child to dabble in programming; what better way to spend the summer holidays!)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Find the course &lt;a href=&#34;https://www.edx.org/course/cs50s-introduction-to-programming-with-python&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, check out the &lt;a href=&#34;https://pll.harvard.edu/catalog?keywords=&amp;amp;subject%5B%5D=3&amp;amp;subject%5B%5D=100&#34;&gt;other CS50 courses&lt;/a&gt;. You might find something which is even more relevant to your ambitions or your current work.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Effective Team Communication in Software Development</title>
      <link>https://karecha.com/blog/2022/03/26/effective-team-communication-in-software-development/</link>
      <pubDate>Sat, 26 Mar 2022 18:31:06 +0530</pubDate>
      <author>tapan@karecha.com (Tapan Karecha)</author>
      <guid>https://karecha.com/blog/2022/03/26/effective-team-communication-in-software-development/</guid>
      <description>&lt;p&gt;Irrespective of your role in Software Development (software development engineer, product manager, quality engineer, engineering manager, director or above), all the tools you use to get the job done can be broadly categorized as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tools for communication and collaboration&lt;/li&gt;
&lt;li&gt;Tools for software development and testing&lt;/li&gt;
&lt;li&gt;Tools for software operations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this article I will discuss the first in that list: Tools for communication and collaboration. A software development team&amp;rsquo;s effectiveness and long-term success hinges upon how they communicate and collaborate within the team as well as with external stakeholders. Understanding the hierarchy of communication and developing a knack for choosing the right level of communication has long term benefits. This is a learnable skill, but like any other soft skill, it requires ongoing calibration in the team. You need a few people who care about this and can set the tone for everyone else.&lt;/p&gt;
&lt;p&gt;The hierarchy of communication and collaboration has the following layers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Team Wiki&lt;/li&gt;
&lt;li&gt;Team Blog&lt;/li&gt;
&lt;li&gt;Documents&lt;/li&gt;
&lt;li&gt;Issue Tracker&lt;/li&gt;
&lt;li&gt;Team Chat&lt;/li&gt;
&lt;li&gt;Personal / Group chat&lt;/li&gt;
&lt;li&gt;Good old face-to-face interaction&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Every time you communicate or collaborate with others, you need to choose an appropriate tool from this hierarchy for maximum impact. This hierarchy has the most durable medium at the top, where discoverability and shareability is also high; all of which reduce when you pick tools lower down in the hierarchy. The signal to noise ratio is also high at the top and falls as you go down the hierarchy. For e.g., any information shared in a face-to-face conversation is least durable, discoverable, or shareable. The only short-term benefits of sharing information in the lower layers are high speed and less formality, which is indispensable in day-to-day work but should not be applied to every piece of information. (By tools I mean product type. For e.g., your wiki could be Confluence, GitHub wiki, or something else; Documents could be Google Docs, Office 365 Word, or something else; and so on.)&lt;/p&gt;
&lt;p&gt;Let us now discuss each layer:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Team Wiki:&lt;/strong&gt; Think of a good wiki as a garden that grows with the product and with the team. It is the team’s collective brain. It is home to the ever-growing information about what the product is, how it works, links to useful resources, known issues, roadmaps, release history, team member details, processes, etc. It should be possible for you to just grant access to the wiki and they should be able to find all the information they need. For e.g., anyone in your team should be able to figure out how to set up their development environment, where to download the product and how to install and run it, learn about the team’s software development processes and practices, how to start taking part in team rituals etc. The wiki should be open for contribution from all team members, but with some oversight from the senior members to keep entropy at bay. Maintaining the wiki is an ongoing process that should become second nature to the team. Just like a garden, it needs constant caring, pruning, weeding, and nourishing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Team Blog:&lt;/strong&gt; This is best for sharing narratives which are snapshots in time. Information you publish on the team blog is not expected to change with time. Information that needs to be updated over time belongs to the wiki. Blogs are for things like release announcements, process change announcements, welcoming a new team member, saying goodbye to a departing team member, announcing promotions or role changes, etc. Blogs are searchable and you can read posts from the past to gain perspective of how things evolved over time. (The conventional way of broadcasting announcements by email should be replaced by blog posts. Emails have a major drawback: information in emails is trapped in people&amp;rsquo;s inboxes. It cannot be discovered by someone who did not receive that email, and they are forever locked out of that piece of information. For example, when you join a company, you do not have access to emails that were sent prior. If you must send an email, first publish your announcement as a blog post and then email the link of that post to your target audience.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Documents:&lt;/strong&gt; These are best suited for collaborative writing or for receiving feedback on your writing. Use online documents for sharing and reviewing product requirements, system design, technical roadmaps etc. Once the review comments are addressed and the content is finalized, you can either move this to wiki or blog depending on the type of information. If your team has a good reason to archive these documents for later reference (instead of publishing this information in a wiki or a blog), then make sure the documents are stored in a location that the entire team can access, and they are well organized in a folder hierarchy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Issue Tracker:&lt;/strong&gt; This is where you submit and track Change Requests (we will call them CRs). Most modern issue trackers are also project management tools which aid project planning, release management and more. In this discussion, we will focus on information exchange facilitated by issue trackers. Each CR tells a story, which starts with the description of a new feature, enhancement, or a bug, and as the team makes progress on this CR, it serves as a log of milestones on the way to accomplishing the objective of that CR. Some teams use issue trackers only for process compliance, and the real conversations happen somewhere else &amp;ndash; either on chat or even face-to-face. The downside of this approach is that your &amp;ldquo;process&amp;rdquo; is now a burden and only serves as a paper trail solely for the sake of compliance; you are not using the tool to improve collaboration. A well written CR allows you to assign or transfer it (at any stage) to someone without the overhead of having to explain everything to them. The CR should be up to date and self-explanatory.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. Team Chat:&lt;/strong&gt; This is where the team congregates and communicates asynchronously. Use topical channels to streamline conversations thereby allowing people to selectively tune into relevant conversations. Avoid posting messages in a “general” channel (unless, of course, it is a broad announcement) or else your team chat will become a noisy bazar where focused dialogs are no longer possible. Do not expect people to always respond promptly as it will kill their ability to focus on tasks; it is a tool for asynchronous communication! Once you start a conversation and it reaches a logical conclusion (either a decision is made, or a new plan is agreed upon etc.), this information should land in a better place. It could be a wiki, issue tracker or whatever is right for the topic. Best thing about team chat: it is inclusionary since every team member is tuned in, including the quiet ones.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. Personal / Group chat:&lt;/strong&gt; This is to send direct messages to individuals or to a group of selected people. Use this only when you are discussing something that would be considered too noisy for team chat channels. The reason not to use group chats for work related topics is because it is exclusionary. Such conversations reduce your team’s shared understanding of what is going on since it excludes some or many of your team members from the discussion.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7. Good old face-to-face interaction:&lt;/strong&gt; This is the bottom rung of the hierarchy and is suitable for getting to know each other, for 1x1s, and for relationship building. While all of this can be done with video conferencing, occasional in-person interactions help build trust and relationship. However, in-person interaction is not necessary for day-to-day work. Remember, effective communication requires us to feed the collective brain. If essential information is exchanged via in-person conversations without surfacing it in any of the other layers discussed above, you are starving the collective brain.&lt;/p&gt;
&lt;p&gt;That is the hierarchy of communication. Since it involves a lot of writing, here’s a quick note about writing in general:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep it simple across the hierarchy&lt;/li&gt;
&lt;li&gt;Structure and categorize information to make it easier to find, even for new members&lt;/li&gt;
&lt;li&gt;People will initially confuse the hierarchy and that is ok; it is part of learning&lt;/li&gt;
&lt;li&gt;When adding information anywhere in the hierarchy, ensure there is sufficient context and cross referencing&lt;/li&gt;
&lt;li&gt;Pay attention to spelling, grammar, and formatting; because typos, bad grammar, and poor formatting reduce readability and are distracting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In conclusion, every time you communicate or collaborate with your team members, pick the right tool. By default, it is easy and tempting to stay in the lower layers of the hierarchy because most people feel safe there, since they do not need to worry about making mistakes, communication feels natural and informal etc. It is a trap! Always strive to continuously refine valuable information and move it up the hierarchy to the right level where it belongs.&lt;/p&gt;
&lt;p&gt;What I have outlined above is what has worked for my teams; you may have a system that works better, and if so, please share in the comments (or create your own post and share the link in comments).&lt;/p&gt;
&lt;p&gt;PS: Thank you &lt;a href=&#34;https://www.linkedin.com/in/deepeshpurswani/&#34;&gt;Deepesh&lt;/a&gt; and &lt;a href=&#34;https://www.linkedin.com/in/ravitheja-bandari-6abb794a/&#34;&gt;Ravitheja&lt;/a&gt; for reading the draft, providing valuable input, and for pointing out errors. Any remaining errors in this post are mine.&lt;/p&gt;
&lt;p&gt;PPS: This article first appeared on &lt;a href=&#34;https://www.linkedin.com/pulse/effective-team-communication-software-development-tapan-karecha/&#34;&gt;LinkedIn here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Technical Debt</title>
      <link>https://karecha.com/blog/2022/03/22/technical-debt/</link>
      <pubDate>Tue, 22 Mar 2022 11:13:23 +0530</pubDate>
      <author>tapan@karecha.com (Tapan Karecha)</author>
      <guid>https://karecha.com/blog/2022/03/22/technical-debt/</guid>
      <description>&lt;p&gt;Here is an &lt;a href=&#34;https://martinfowler.com/articles/bottlenecks-of-scaleups/01-tech-debt.html&#34;&gt;interesting article on Tech Debt&lt;/a&gt; from Martin Fowler&amp;rsquo;s website. It is a part of a series where the authors discuss how startups get into the bottleneck as growth changes the context for ways of working. I think their arguments hold up even for fast growing products in larger enterprises.&lt;/p&gt;
&lt;p&gt;The article starts with defining tech debt which goes beyond just code quality issues, and includes coupling, unused or low value features, manual processes, tooling and more. Next, it delves into how to determine that you are approaching the point where it will start to impact growth. Lastly, it discusses strategies to manage tech debt.&lt;/p&gt;
&lt;p&gt;Many engineering teams are shackled by a self-limiting belief that technical debt is of their own doing. This is further reinforced when they are expected to just figure it out and fix it. If only it was that simple! My biggest takeaway from the article: managing tech debt requires involvement from more than just the engineering teams; the leaders, product, and engineering must join hands for it to work.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
