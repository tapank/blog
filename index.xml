<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes to self</title>
    <link>http://karecha.com/index.xml</link>
    <description>Recent content on Notes to self</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Dec 2016 11:37:16 +0530</lastBuildDate>
    <atom:link href="http://karecha.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>One on ones (howto)</title>
      <link>http://karecha.com/blog/2016/12/20/one-on-ones-howto/</link>
      <pubDate>Tue, 20 Dec 2016 11:37:16 +0530</pubDate>
      
      <guid>http://karecha.com/blog/2016/12/20/one-on-ones-howto/</guid>
      <description>&lt;p&gt;Andy Grove explains how to have effective 1x1s in his classic
management book &lt;a href=&#34;https://www.amazon.com/High-Output-Management-Andrew-Grove/dp/0679762884&#34; target=&#34;_blank&#34;&gt;High Output Management&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Block regular time; tune frequency for individual&lt;/li&gt;
&lt;li&gt;Show up on time; don’t cancel at the last minute&lt;/li&gt;
&lt;li&gt;Prepare discussion points; ask him/her to do the same&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Remember:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be flexible; some structure but not too much&lt;/li&gt;
&lt;li&gt;Do some &amp;ldquo;loose timeboxing&amp;rdquo;; ensure time to cover most pressing points&lt;/li&gt;
&lt;li&gt;Set expectations around what is most important; create an incentive to focus&lt;/li&gt;
&lt;li&gt;Be fully present; shift gears and get out of autopilot&lt;/li&gt;
&lt;li&gt;Make a difference in the life of this person; devote full attention&lt;/li&gt;
&lt;li&gt;Strike a balance between asking questions and listening; consider it a precious moment of connection&lt;/li&gt;
&lt;li&gt;If the conversation diverges, get it back on track&lt;/li&gt;
&lt;li&gt;Give them time and space to think about what they want to express&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Meet:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start positive by sharing a win&lt;/li&gt;
&lt;li&gt;Ask direct but open-ended questions about goals&lt;/li&gt;
&lt;li&gt;Ask questions about career plans; do not neglect the personal&lt;/li&gt;
&lt;li&gt;Ask strategic questions (e.g. are we focused on the right things?)&lt;/li&gt;
&lt;li&gt;End with a note of appreciation and gratitude; words of affirmation mean a lot&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Crocker&#39;s Rule</title>
      <link>http://karecha.com/blog/2016/11/07/crockers-rule/</link>
      <pubDate>Mon, 07 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://karecha.com/blog/2016/11/07/crockers-rule/</guid>
      <description>&lt;p&gt;Crocker&amp;rsquo;s rule:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Declaring yourself to be operating by &amp;ldquo;Crocker&amp;rsquo;s Rules&amp;rdquo; means that other people are allowed to optimize their messages for information, not for being nice to you.  Crocker&amp;rsquo;s Rules means that you have accepted full responsibility for the operation of your own mind - if you&amp;rsquo;re offended, it&amp;rsquo;s your fault.  Anyone is allowed to call you a moron and claim to be doing you a favor.  (Which, in point of fact, they would be.  One of the big problems with this culture is that everyone&amp;rsquo;s afraid to tell you you&amp;rsquo;re wrong, or they think they have to dance around it.)  Two people using Crocker&amp;rsquo;s Rules should be able to communicate all relevant information in the minimum amount of time, without paraphrasing or social formatting.  Obviously, don&amp;rsquo;t declare yourself to be operating by Crocker&amp;rsquo;s Rules unless you have that kind of mental discipline.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note that Crocker&amp;rsquo;s Rules does not mean you can insult people; it means that other people don&amp;rsquo;t have to worry about whether they are insulting you.&lt;/strong&gt;  Crocker&amp;rsquo;s Rules are a discipline, not a privilege.  Furthermore, taking advantage of Crocker&amp;rsquo;s Rules does not imply reciprocity.  How could it?  Crocker&amp;rsquo;s Rules are something you do for yourself, to maximize information received - not something you grit your teeth over and do as a favor.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Crocker&amp;rsquo;s Rules&amp;rdquo; are named after Lee Daniel Crocker.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The above originally appears &lt;a href=&#34;http://www.sl4.org/crocker.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;. Crocker&amp;rsquo;s wikipedia page is &lt;a href=&#34;https://en.wikipedia.org/wiki/Lee_Daniel_Crocker&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get Unstuck</title>
      <link>http://karecha.com/blog/2016/11/06/get-unstuck/</link>
      <pubDate>Sun, 06 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://karecha.com/blog/2016/11/06/get-unstuck/</guid>
      <description>&lt;p&gt;When learning a new programming language, a new framework, or a new technology, there will be times when you will get stuck. When you are stuck, do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/RTFM&#34; target=&#34;_blank&#34;&gt;RTFM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codinghorror.com/rubber-duck-problem-solving&#34; target=&#34;_blank&#34;&gt;Ask the rubber duck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wiktionary.org/wiki/STFW&#34; target=&#34;_blank&#34;&gt;STFW&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ask a friend or colleague&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This order is important for maximizing learning.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teaching</title>
      <link>http://karecha.com/blog/2016/10/28/teaching/</link>
      <pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://karecha.com/blog/2016/10/28/teaching/</guid>
      <description>&lt;p&gt;Teaching is most effective when done by a practitioner of the subject matter. That is why Bret Victor says this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Real teaching is not about transferring &amp;ldquo;the material&amp;rdquo;, as if knowledge were some sort of mass-produced commodity that ships from Amazon. Real teaching is about conveying a way of thinking. How can a teacher convey a way of thinking when he doesn&amp;rsquo;t genuinely think that way?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The entire &lt;a href=&#34;http://worrydream.com/SomeThoughtsOnTeaching/&#34; target=&#34;_blank&#34;&gt;blog post&lt;/a&gt; is worth a read &amp;ndash; and a re-read.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pull request checklist</title>
      <link>http://karecha.com/blog/2016/10/26/pull-request-checklist/</link>
      <pubDate>Wed, 26 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://karecha.com/blog/2016/10/26/pull-request-checklist/</guid>
      <description>&lt;p&gt;Open source projects have styleguides, and &lt;a href=&#34;https://github.com/chain/chain/blob/main/docs/internal/styleguide.md&#34; target=&#34;_blank&#34;&gt;this one&lt;/a&gt; is one such example. What caught my attention is the code review checklist, though there are other nuggets in there.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Checklist&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before you submit your patch for review, look at the diff. Consider running through a quick mental checklist of all the things discussed above before submitting your patch for review:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Did I write tests and update docs?&lt;/li&gt;
&lt;li&gt;Can it be any clearer?&lt;/li&gt;
&lt;li&gt;Can I delete more lines of code?&lt;/li&gt;
&lt;li&gt;Does the diff overall look reasonable?&lt;/li&gt;
&lt;li&gt;Is there any cruft like stray blank lines or debugging output or irrelevant trivial refactorings?&lt;/li&gt;
&lt;li&gt;Should the change be broken into multiple meaningful pieces?&lt;/li&gt;
&lt;li&gt;Is this change really necessary at all?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(You might be surprised how often the answer to that last one is “no”.)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Advice from an astronaut</title>
      <link>http://karecha.com/blog/2016/01/03/advice-from-an-astronaut/</link>
      <pubDate>Sun, 03 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://karecha.com/blog/2016/01/03/advice-from-an-astronaut/</guid>
      <description>&lt;p&gt;To the &lt;a href=&#34;https://www.reddit.com/r/IAmA/comments/1s4l7v/i_am_col_chris_hadfield_retired_astronaut/&#34; target=&#34;_blank&#34;&gt;question&lt;/a&gt;: &amp;ldquo;What advice would you give a 13-year-old who wishes to become an astronaut in the future?&amp;rdquo;, the astronaut &lt;a href=&#34;https://twitter.com/Cmdr_Hadfield&#34; target=&#34;_blank&#34;&gt;Chris Hadfield&lt;/a&gt; answered:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;3 things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;keep your body in shape. You get strong at the gym and thin in the kitchen&lt;/li&gt;
&lt;li&gt;get an advanced technical education, one that challenges you, at least a Master&amp;rsquo;s degree&lt;/li&gt;
&lt;li&gt;make decisions, and stick to them. It&amp;rsquo;s a skill that gets better with practice.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Agile is the new waterfall</title>
      <link>http://karecha.com/blog/2015/10/15/agile-is-the-new-waterfall/</link>
      <pubDate>Thu, 15 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://karecha.com/blog/2015/10/15/agile-is-the-new-waterfall/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://medium.com/swlh/agile-is-the-new-waterfall-f7baef5d026d&#34; target=&#34;_blank&#34;&gt;Thought provoking analysis&lt;/a&gt; of the state of Agile today.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unfortunately, with little or no documentation, now the developer is accountable for the outcome while having little or no authority to create a winning one. This responsibility without authority makes Agile even more toxic than Waterfall.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Tab width</title>
      <link>http://karecha.com/blog/2015/10/11/tab-width/</link>
      <pubDate>Sun, 11 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://karecha.com/blog/2015/10/11/tab-width/</guid>
      <description>&lt;p&gt;After reading the following from the &lt;a href=&#34;https://www.kernel.org/doc/Documentation/CodingStyle&#34; target=&#34;_blank&#34;&gt;kernel.org coding styleguide&lt;/a&gt;, it is easy to see why not to write code with tabs converted to spaces, and why not to set tab width to anything less than eight.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tabs are 8 characters, and thus indentations are also 8 characters.  There are heretic movements that try to make indentations 4 (or even 2!) characters deep, and that is akin to trying to define the value of PI to be 3.&lt;/p&gt;

&lt;p&gt;Rationale: The whole idea behind indentation is to clearly define where a block of control starts and ends.  Especially when you&amp;rsquo;ve been looking at your screen for 20 straight hours, you&amp;rsquo;ll find it a lot easier to see how the indentation works if you have large indentations.&lt;/p&gt;

&lt;p&gt;Now, some people will claim that having 8-character indentations makes the code move too far to the right, and makes it hard to read on a 80-character terminal screen.  The answer to that is that if you need more than 3 levels of indentation, you&amp;rsquo;re screwed anyway, and should fix your program.&lt;/p&gt;

&lt;p&gt;In short, 8-char indents make things easier to read, and have the added benefit of warning you when you&amp;rsquo;re nesting your functions too deep.  Heed that warning.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also, using tabs instead of spaces allows the reader to personalize visual depth of indentation, while spaces lock you into what the author chose. Hence, prefer tabs over spaces in your coding standards &amp;ndash; and even if you don&amp;rsquo;t &amp;ndash; never mix the two!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Process</title>
      <link>http://karecha.com/blog/2015/09/20/process/</link>
      <pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://karecha.com/blog/2015/09/20/process/</guid>
      <description>&lt;p&gt;Author of &amp;ldquo;&lt;a href=&#34;http://firstround.com/review/im-sorry-but-agile-wont-fix-your-products/&#34; target=&#34;_blank&#34;&gt;I&amp;rsquo;m Sorry, But Agile Won&amp;rsquo;t Fix Your Products&lt;/a&gt;&amp;rdquo; has valid points but something more needs to be said. I am concerned that the onus of creativity is being relegated away from people, as if process is capable of thinking.&lt;/p&gt;

&lt;p&gt;It is important to note that Agile is one of many software development processes, and hence it could have been claimed that &amp;ldquo;Processes will not fix your Products,&amp;rdquo; and the arguments in that article would still hold good. Anybody who has been on a team that delivered working software &amp;ndash; successful or not &amp;ndash; will agree that the most difficult part of product lifecycle is to decide &lt;em&gt;what&lt;/em&gt; to build. This is a step that tests the toughest of souls and can make strong people cry. Once a decision has been made about &lt;em&gt;what&lt;/em&gt; needs to be build, then its a race to the finish and process will help with navigate &lt;em&gt;how&lt;/em&gt;. People may still make mistakes during construction phase, but those mistakes are easy to spot and are hence fixable. No software development process will help during product definition phase, and what makes it challenging is &amp;ndash; product owners need to answer existential questions, including:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Why are we in business?&lt;/li&gt;
&lt;li&gt;What are we trying to accomplish?&lt;/li&gt;
&lt;li&gt;What are our core guiding principles?&lt;/li&gt;
&lt;li&gt;How will this product or increment help the business without violating any of the above?&lt;/li&gt;
&lt;li&gt;Are we doing this just because we can? Or, are we doing this because we should?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These questions can be difficult to answer, yet must be asked irrespective of process.&lt;/p&gt;

&lt;p&gt;Once a decision of &lt;em&gt;what&lt;/em&gt; has been made, it is time to ask &lt;em&gt;how&lt;/em&gt;. This is where process steps in, and based on the nature of a product, time to market, nature of target audience, maturity and capacity of development team, etc., a team uses process to take the product to market. But before we decide which process to use, let us remind ourselves why we need process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who needs process?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of notions about process is that you need it to help team members with little experience so they don&amp;rsquo;t make rookie mistakes. This notion is not only incorrect, but also hurts a team that has bought into this notion. Ever seen a situation where a senior member of a team will demand that a newbie create a ticket even for a trivial code change, but they themselves will make such changes &amp;ndash; not only without following an agreed &amp;ldquo;process&amp;rdquo;, but even without informing others in the team? Such a team now has two problems [An exercise for the reader to list the two problems].&lt;/p&gt;

&lt;p&gt;A process is needed for mature and experienced team members to synchronize and coordinate their work in order to extract maximum value from a team&amp;rsquo;s effort. Without process, you will have multiple members in a team putting in their best work but the vector of each individual&amp;rsquo;s effort is less than 100 percent along the dimension that a business wants to go. They will keep stepping on each other&amp;rsquo;s foot and will project an inaccurate picture of state of affairs to others in a team, and even outside the team. This is why we need process, but no process can compensate for a lack of thinking that goes into product decisions.&lt;/p&gt;

&lt;p&gt;What about rookies in a team? Of course they too need to follow process, but more important, learn why every process step exists and matters. Encourage them to ask &lt;em&gt;why&lt;/em&gt; a certain process is necessary, and be very happy when they challenge that a certain process is unnecessary. In absence of healthy scepticism for process, the team risks descending into process hell.&lt;/p&gt;

&lt;p&gt;Bottomline: a mature team will not only follow process, but constantly evolve it to ensure that the team becomes more efficient and effective with time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Agile or agile?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Agile&amp;rdquo;, the noun, is the poster kid in the process world and it rose to fame when the &lt;a href=&#34;http://www.agilemanifesto.org/&#34; target=&#34;_blank&#34;&gt;Agile Manifesto&lt;/a&gt; was formed. The other &amp;ldquo;agile&amp;rdquo; is what the proponents wanted the development teams to be, where agile is an adjective and is a word to be used by a proud technician as such, &amp;ldquo;I work for an agile team that uses a home grown variation of Scrum and XP to deliver quality software.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;So, &amp;ldquo;Agile&amp;rdquo; is a well intentioned set of guidelines which were also a snapshot of what made sense at the time. Just like any process, Agile is starting to show signs of age. Unless a team is agile, they will find Agile to be limiting. Kent Beck (one of the signees of the manifesto and the inventor of JUnit) tried to &lt;a href=&#34;https://www.youtube.com/watch?v=d4qldY0g_dI&#34; target=&#34;_blank&#34;&gt;fix this way back in 2010&lt;/a&gt;, and recently Dave Thomas (another signee of the manifesto and the author of the Ruby pickaxe book) &lt;a href=&#34;http://pragdave.me/blog/2014/03/04/time-to-kill-agile/&#34; target=&#34;_blank&#34;&gt;said this&lt;/a&gt; and he did not pull his punches.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A process will not fix your product. A process is a set of guidelines and is as good or bad as the people who use them. A process will not &lt;em&gt;do&lt;/em&gt; anything &amp;ndash; that is left to the humans. Nothing will fix a product, except the humans involved. There is no escaping the cognitive load of product definition, and we, the humans, are the right &amp;lsquo;tool&amp;rsquo; to take on this responsibility.&lt;/p&gt;

&lt;p&gt;And, how do you ship software? There is no &lt;a href=&#34;http://firstround.com/review/the-right-way-to-ship-software/&#34; target=&#34;_blank&#34;&gt;one right answer&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tending code</title>
      <link>http://karecha.com/blog/2015/09/17/tending-code/</link>
      <pubDate>Thu, 17 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://karecha.com/blog/2015/09/17/tending-code/</guid>
      <description>&lt;p&gt;Rachel Davies in a blog post titled &lt;a href=&#34;http://rachelcdavies.github.io/2015/04/30/time-to-tend-code.html&#34; target=&#34;_blank&#34;&gt;Making Time To Tend Code&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Setting aside time to tend our code is essential for us to maintain fruitful software assets. Start by making technical tasks visible to your team. Prioritise these tasks so that the team works on the ones that will yield most benefit. At standup, consider as a team, what effort should be put on code tending tasks today. Keep track how much time you spend on code tending, this can help you strike the right balance against business facing features. Reflect together as a team on how code tending is going.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Grit</title>
      <link>http://karecha.com/blog/2015/09/10/grit/</link>
      <pubDate>Thu, 10 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://karecha.com/blog/2015/09/10/grit/</guid>
      <description>&lt;p&gt;DHH in a blog post titled &lt;a href=&#34;https://signalvnoise.com/posts/3924-grit-is-for-cowboys&#34; target=&#34;_blank&#34;&gt;Grit is for cowboys&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Grit is a convenient trait for enticing others to comply with the uncomfortable or the uninteresting. It elevates the perseverance of such adversity to a virtue in and of itself. Just dangle that long-term goal in front of them, accuse them of lack of grit, and compliance will oft follow.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>We need more Scouts</title>
      <link>http://karecha.com/blog/2015/04/03/we-need-more-scouts/</link>
      <pubDate>Fri, 03 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://karecha.com/blog/2015/04/03/we-need-more-scouts/</guid>
      <description>&lt;p&gt;A typical software development shop in India has one permanent &amp;lsquo;feature&amp;rsquo;: an army of workers (a.k.a. housekeeping staff) whose sole responsiblity is to cleanup after employees. These are the people whose job is to collect empty coffee mugs or cups from cubicles, refill the coffee machine in the pantry, clean the tables in the pantry after the employees leave coffee or tea stains on them, or dispose the empty pizza boxes once the employees are done eating pizza. Even the chairs around the tables need to be put back in place once the employees who sat on those chairs leave them after pushing them back when getting off the said chairs. When the employees leave the meeting room, they leave the projector on, the lights on, leave the chairs scattered across the meeting room, leave empty coffee cups on the table, leave writing on the whiteboard, leave used tissue on the table, leave whiteboard markers anywhere but in the little tray meant for the markers, leave extra chairs in the room that they pulled from cubicles nearby because there werent enough chairs in the room etc. This shows that people are not paying attention to what they leave behind as a consequence of their actions.&lt;/p&gt;

&lt;p&gt;My point is, for some reason, we have been conditioned to believe that cleaning up is not our responisibility. It is someone else&amp;rsquo;s job to cleanup after they are done doing whatever they were doing. When we see litter, the question we ask is &amp;ldquo;Why has someone not cleaned this up?&amp;rdquo;, instead of &amp;ldquo;Why did someone litter, and how can we educate them to not not do it again?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;While I understand it is much cheaper to pay someone else to do the dirty job (especially when the minimum hourly wages are so low), this comes at a price that we should know we invariably end up paying. For example, I cannot think of places where you can find some quiet and solitude. If a place is safe and clean, then its most likely riddled with an army of workers who keep this place safe and clean.&lt;/p&gt;

&lt;p&gt;The solution is for people to change their mindset by embracing &lt;a href=&#34;http://www.informit.com/articles/article.aspx?p=1235624&amp;amp;seqNum=6&#34; target=&#34;_blank&#34;&gt;the boy scout rule&lt;/a&gt;. This applies to programming as well as anything else we do. The rule goes: &amp;ldquo;Leave the campground cleaner than you found it.&amp;rdquo; If you can maintain cleanliness of a place over a period of time, then you will do the same to your code, and most other things that you do in life.&lt;/p&gt;

&lt;p&gt;As a programmer, the lessons are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Leave the code more readable and maintainable after every change.&lt;/li&gt;
&lt;li&gt;Test your code even if someone else will test it for you later.&lt;/li&gt;
&lt;li&gt;When someone reports an issue, stop arguing and pay attention to what caused the person to report an issue, even if it is not a bug.&lt;/li&gt;
&lt;li&gt;Try to simplify the deployment steps whenever possible.&lt;/li&gt;
&lt;li&gt;Handoff to other functions once you are done. E.g. tell documentation person what needs to change/added.&lt;/li&gt;
&lt;li&gt;Finally, ensure that the end user of your application benefits from your change in some way. This is the sole purpose of making a code change.&lt;/li&gt;
&lt;li&gt;All of this is possible only if you stop expecting people to automatically cleanup after you.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Break</title>
      <link>http://karecha.com/blog/2014/11/13/break/</link>
      <pubDate>Thu, 13 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://karecha.com/blog/2014/11/13/break/</guid>
      <description>&lt;p&gt;After 24 years of working at various jobs, I bid goodbye to by colleagues and began the first full time break of my career. This was not easy, especially because once I announced my decision about a month ago, my team and my colleagues made me feel very special. But this day had to come, and now I am no longer employed and intend to stay this way until I fix a few things. As an engineer, I am trained to spot slow moving disasters in their early stages and that allows me to take my own sweet time to engineer and implement a fix before a lot of damage is done. Spotting issues early allows me to take aim and have a shot at a solution.&lt;/p&gt;

&lt;p&gt;The slow moving disasters that I talked about are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Degrading physical fitness&lt;/li&gt;
&lt;li&gt;Lack of quality time with family&lt;/li&gt;
&lt;li&gt;Lack of creative satisfaction&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let me explain.&lt;/p&gt;

&lt;p&gt;My last job as a software development manager was to manage a devops team of very smart software development engineers that built and maintained customer facing services. While I had fun getting involved in solving interesting problems, the always-on nature of a devops manager role started to take its toll. Due to this constant low level stress, my otherwise healthy lifestyle started to degrade. It started with me missing one or two running and gym sessions every week, and eventually, by the end of last year I stopped exercising. To make matters worse, I started eating unhealthy. Everybody around me was eating unhealthy too (but hey, most of them are half my age) and it took me a while to notice this unhealthy change. In the last 1.5 years, I put on 8 kg and I think health and fitness is too high a cost to pay for &lt;em&gt;any&lt;/em&gt; career gain. I need to get back in shape.&lt;/p&gt;

&lt;p&gt;At the end of each day, I want to spend time with my family. The fact is, the end of the day brings with it a flurry of activity as my US colleagues wake up, start their day, and emails start pouring in. Don&amp;rsquo;t get me wrong &amp;ndash; I am not saying it is their fault. They too end up going through the same at the end of their day. As a result when its time to go to bed, instead of being relaxed and prepared for a sound sleep, my adrenaline is peaking and it affects the quality of my sleep. And there are late evening calls. There have been times when the kids want to talk to me but I am on a call and have to ask them to leave the room. Children (not just mine, but of so many others in this industry) are conditioned to shut up when they hear &amp;ldquo;papa is on a call&amp;rdquo;. I do not want to do this to my kids any more.&lt;/p&gt;

&lt;p&gt;Last, but not the least, I found myself caught up in so much paper work and processes that it started to defeat the reason I joined this industry. I love solving problems and I love developing software, but I found myself doing less of it. There must be a way for a middle aged software professional to find joy in this profession. I will need to figure this out.&lt;/p&gt;

&lt;p&gt;In this post, I talk about the problems. Tomorrow, a new day will begin and I will start working on solutions. Now I have time on my hands to figure out the next steps. I am looking forward to solving these problems because, after all, I love solving problems.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deliberate practice</title>
      <link>http://karecha.com/blog/2014/03/17/deliberate-practice/</link>
      <pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://karecha.com/blog/2014/03/17/deliberate-practice/</guid>
      <description>&lt;p&gt;Ruby Rogues podcast recently had an interesting discussion about how to learn [1]. At the center of the discussion was a wrong, but commonly held notion that talent is genetic. They discussed research about the role of deliberate practice in making of an elite performer. I think this knowledge broadly applies to a number of domains, including to those in knowledge industry. The main source of that information is from a research paper by Ericsson et. al. [2], which is also considered to be one of the main sources of information for Malcom Gladwell&amp;rsquo;s famous 10,000 hours narrative in his book Outliers. The material presented below is from that research paper by Ericsson et. al., and is paraphrased and summarized for my own understanding. The research matters to me for two reasons: one, I have children who are 7 and 4, and are of age when expert performers are first introduced to the domain in which they become experts in their later life; and second, though I am well past that tender age, am eager to learn anything that applies to individuals of any age. I want to acquire new skills and get better at the ones that I already have.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not hereditary; but acquired&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What are the possibilities and limits of change in cognitive capacities and bodily functions of an individual? Only few abilities are arguably direct reflection of genetic factors, for e.g. height, which may be detrimental to an individual&amp;rsquo;s success at sport like basketball and volleyball. But in most cases, an expert&amp;rsquo;s superior performance implies that acquired knowledge and skill are important to attainment of expert performance. The only plausible role for hereditary factors is in the developmental history of an individual. Superior performance by very young children without prior instruction may suggest exceptional promise, leading to an early onset of training. Unique environmental conditions and parental support, rather than talent, are the important factors determining the initial onset of training and ultimate performance. Training can also compensate for disabilities and has a greater impact than often believed possible. What distinguishes expert performers is also more and better organized knowledge, which is an acquired asset.&lt;/p&gt;

&lt;p&gt;Following are the phases of development that lead to elite performance. During the first three phases, you need support from external sources, such as parents (for children), teachers or mentors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Phase 1&lt;/em&gt;: Starts with introduction to activities in the domain and ends with the start of instruction and deliberate practice.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Phase 2&lt;/em&gt;: Consists of an extended period of preparation and ends with the individual&amp;rsquo;s commitment to pursue activities in the domain on a full-time basis.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Phase 3&lt;/em&gt;: Consists of full-time commitment to improving performance and ends when you either can make a living as a professional performer in the domain, or you quit.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Phase 4&lt;/em&gt;: You go beyond the knowledge of your teachers or mentors, to make a unique innovative contribution to your domain.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A common theme that flows through the four phases above is of deliberate practice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is deliberate practice&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The maximum level of performance for individuals in a given domain is not attained automatically due to extended experience. People hit plateaus in skill acquisition, when for long periods they seem unable to attain further improvements. The level of their performance can be increased by making deliberate efforts to improve. This is done by actively searching for methods to improve performance and when they make changes in methods it often leads to clear improvements. The activity one does in order to see improvement is called deliberate practice. The goal of deliberate practice is not doing &amp;ldquo;more of the same.&amp;rdquo; Rather, it involves engaging with full concentration in a special activity to improve your performance. Here are the definitions of broad activities that we perform on a daily basis:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Work&lt;/em&gt;: Public performance, competitions, services rendered for pay, and other activities directly motivated by external rewards&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Play&lt;/em&gt;: Activities that have no explicit goal and that are inherently enjoyable&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Deliberate practice&lt;/em&gt;: Activities that have been specially designed to improve the current level of performance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In contrast to play, deliberate practice is a highly structured activity, the explicit goal of which is to improve performance. Specific tasks are invented to overcome weaknesses, and performance is carefully monitored to provide cues for ways to improve it further. Its practice requires effort and is not inherently enjoyable. Without the goal of improving performance, the motivation to engage in practice vanishes. Individuals are motivated to practice only because practice improves their performance. It does not generate immediate monetary rewards, but rather generates costs associated with access to teachers and training environments. The long-term consequences of deliberate practice is important because of the cost involved.&lt;/p&gt;

&lt;p&gt;Deliberate practice should not be confused with the enjoyable state of &amp;ldquo;flow,&amp;rdquo; in which individuals are completely immersed in an activity. Flow is a state of effortless mastery and execution of an activity. This state of diffused attention is almost in contrast with focused attention required by deliberate practice to maximize feedback and information about corrective action. Hence, flow produces a state which allows an individual to enjoy the activity performed, but does not necessarily improve the level of their expertise as a result of performing that activity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How much is enough&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You must maximize the amount of time you spend on deliberate practice to improve performance. International level performers often receive their first exposure to their domain between the ages of 3 and 8, but it is never too late to start. People in their advanced age have seen their performance improve as a result of deliberate practice.&lt;/p&gt;

&lt;p&gt;The level of performance an individual attains is directly related to the amount of deliberate practice. Hence, to maximize your performance, you should maximize the amount of deliberate practice. But before you go full throttle, you should also know that this time period extends over months and years. The duration of effective daily practice that can be sustained over such long periods is limited and it is necessary to maintain full attention during the entire period of deliberate practice. Hence, you should start slow and slowly increase the amount of deliberate practice over extended periods of time. You will need to device your own strategy to make it sustainable. Look at examples of successful people in order to come up with your solution. For example, successful authors who can control their work habits and are motivated to optimize their productivity, limit their most important intellectual activity to a fixed daily amount when working on projects that require long periods of time to complete. Too rapid increase in the intensity of practice lead to &amp;ldquo;overuse and overtraining&amp;rdquo;, which occur frequently in sports and even in music. Experts carefully schedule deliberate practice and limit its duration to avoid exhaustion and burnout.&lt;/p&gt;

&lt;p&gt;In summary, disregard of the effort constraint on deliberate practice leads to injury and even failure. Start slow, and increase the amount of time you spend on a daily basis on deliberate practice. Some of the best performers engage in practice for up to 4 hours per day including weekend. However, you should be aware that they achieved 4 hours practice after a number of years in that domain, so you want to start with 45 minutes or 1 hour a day, and gradually increase the duration over time. The amount of weekly practice for individuals maintaining regular practice increases with age, accumulated practice, and performance. In virtually all domains, there is evidence that the most important activity &amp;ndash; practice, thinking, or writing &amp;ndash; requires considerable effort and is scheduled for a fixed period during the day. For those exceptional individuals who sustain this regular activity for months and years, its duration is limited to 2-4 hours a day, which is a fraction of their time awake.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;More about experts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Individuals who practice more, also sleep longer. They also spend less time for leisure even though they admit that it is the most enjoyable of all activities. Experts are also able to estimate quite accurately the time they allocated to leisure, whereas others underestimate their leisure time.&lt;/p&gt;

&lt;p&gt;They also seek out the very best teachers in their domain. Over the years, they have taken formal instruction from more teachers than the non experts.&lt;/p&gt;

&lt;p&gt;The organization and accessibility of knowledge has also been shown to distinguish individuals at different levels of expertise in physics, medicine, and social science. Unlike the rapid decay of acquired knowledge seen in laboratory studies, repeated application and use of knowledge over extended periods leads to remarkably good retention of the knowledge even after years or decades of disuse.&lt;/p&gt;

&lt;p&gt;Once an individual has acquired a reasonably high level of skill, it is possible for that individual to attain an above average performance or even regain the original performance after a brief period of retraining.&lt;/p&gt;

&lt;p&gt;Elite performers maximize the effectiveness of their deliberate activities by engaging in them at a certain time of day, which differs across domains. Scientists and authors consistently choose to use mornings for demanding writing, and athletes prefer afternoons for their most strenuous practice sessions. Research on the effects of the time of day shows that simple perceptual-motor performance is enhanced in the afternoon and early evening, whereas intellectually demanding activities are enhanced in the morning. So pick a fixed time in the day that works for you, and use that time for deliberate practice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Research shows that the past amount of deliberate practice is directly related to the individual&amp;rsquo;s current performance. Deliberate practice starts at a low level and increases over time. Even the adult elite performance, with individuals with more than 10 years of practice, is related to the amount of deliberate practice. Domain-specific mechanisms, rather than more general cognitive-motor abilities, are responsible for expert&amp;rsquo;s superior performance.&lt;/p&gt;

&lt;p&gt;Elite performance is a product of a decade or more of maximal efforts to improve performance in a domain, through an optimal distribution of deliberate practice.&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[1] &lt;a href=&#34;http://rubyrogues.com/131-rr-how-to-learn&#34; target=&#34;_blank&#34;&gt;http://rubyrogues.com/131-rr-how-to-learn&lt;/a&gt;&lt;br /&gt;
[2] Ericsson et. al. (1993) The Role of Deliberate Practice in the Acquisition of Expert Performance. (&lt;a href=&#34;http://graphics8.nytimes.com/images/blogs/freakonomics/pdf/DeliberatePractice%28PsychologicalReview%29.pdf&#34; target=&#34;_blank&#34;&gt;download PDF&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Balance</title>
      <link>http://karecha.com/blog/2014/01/05/balance/</link>
      <pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://karecha.com/blog/2014/01/05/balance/</guid>
      <description>&lt;p&gt;A life lesson I learned last year is by watching others go about doing their jobs. It is about effectiveness &amp;ndash; and striking a balance between short term and longer term effectiveness. The lesson is: do not give up long term effectiveness in favor of short term efficiencies.&lt;/p&gt;

&lt;p&gt;When we look back, it is easy to tell if the balance was right but not as easy when the choice lies in front of us. In such situations, leaning towards long term effectiveness makes it more likely that we will be comfortable with our choices of the past.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>